# Get disordered regions (MobiDB) that are not fully contained in a DisProt disordered region (IDPO:00076), and with the Uniprot service associates PDB chains that are related to the filtered region.
PREFIX schema: <https://schema.org/>
PREFIX idp: <https://idpcentral.org/registry/>
PREFIX up: <http://purl.uniprot.org/core/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?sequenceID ?identifier ?disprotIdentifier ?start ?end ?pdbInfo
WHERE {
    {
        SELECT DISTINCT ?sequenceID ?disprotIdentifier ?identifier ?start ?end
        WHERE {
            GRAPH idp:mobidb {
                ?protein a schema:Protein ;
                    schema:sameAs ?sequenceID ;
                    schema:hasSequenceAnnotation ?annotationID ;
                    schema:identifier ?id .
                ?annotationID schema:sequenceLocation ?sequenceLocation .
                ?sequenceLocation schema:rangeStart ?s ;
                    schema:rangeEnd ?e .
                BIND(URI(?id) as ?identifier)
                BIND(xsd:integer(?s) AS ?start)
                BIND(xsd:integer(?e) AS ?end)
            }
            GRAPH idp:disprot {
                ?x schema:sameAs ?sequenceID ;
                    schema:hasSequenceAnnotation ?disprotAnnotationID ;
                    schema:identifier ?dID .
                ?disprotAnnotationID schema:sequenceLocation ?disprotSequenceLocation .
                ?disprotSequenceLocation schema:rangeStart ?dS ;
                    schema:rangeEnd ?dE .
                ?disprotAnnotationID schema:additionalProperty/schema:value/schema:termCode ?term .
                FILTER (?term = "IDPO:00076")
                BIND(URI(?dID) as ?disprotIdentifier)
                BIND(xsd:integer(?dS) AS ?disprotStart)
                BIND(xsd:integer(?dE) AS ?disprotEnd)
            }
            FILTER (?disprotStart >= ?start && ?disprotEnd <= ?end)
        }
        ORDER BY ?sequenceID ?start ?end
        offset 0
        LIMIT 30
    }
    SERVICE <https://sparql.uniprot.org/sparql> {
        ?sequenceID a up:Protein ;
            rdfs:seeAlso ?pdb .
        ?pdb up:database <http://purl.uniprot.org/database/PDB> ;
            up:chainSequenceMapping ?chainSm .
        ?chainSm up:chain ?chainsPlusRange .
        # Extract the list of chains from the text representation.
        BIND(STRBEFORE(?chainsPlusRange, '=') AS ?chain)
        BIND(STRAFTER(?chainsPlusRange, '=') AS ?range)
        BIND(xsd:integer(STRBEFORE(?range, '-')) AS ?rangeStart)
        BIND(xsd:integer(STRAFTER(?range, '-')) AS ?rangeEnd)
        BIND(REPLACE(STR(?sequenceID), "(^.+/)", "") AS ?sequenceIDstripped)
        FILTER (
            REGEX(STR(?chainSm), ?sequenceIDstripped) &&
            (
                ?start >= xsd:integer(?rangeStart) && ?start <= xsd:integer(?rangeEnd) ||
                ?end >= xsd:integer(?rangeStart) && ?end <= xsd:integer(?rangeEnd) ||
                ?start < xsd:integer(?rangeStart) && ?end > xsd:integer(?rangeEnd)
            )
        )
        BIND(REPLACE(STR(?pdb), "(^.+/)", "") AS ?pdbId)
        BIND(concat(?pdbId, '_', ?chain, ' ', ?rangeStart, '-', ?rangeEnd) AS ?pdbInfo)
    }
}
GROUP BY ?sequenceID ?identifier ?disprotIdentifier ?start ?end ?pdbInfo
ORDER BY ?sequenceID ?start ?end
